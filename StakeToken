// SPDX-License-Identifier: MIT

pragma solidity ^0.8.4;

import "IERC20.sol";

contract StakeToken is IERC20 {
    mapping(address => uint256) public override balanceOf;

    mapping(address => mapping(address => uint256)) public override allowance;

    uint256 public _totalSupply; 

    address private ContractOwner;

    string public name; 
    string public symbol;

    uint8 public Decimals;


    constructor(
        string memory name_,
        string memory symbol_,
        uint256 totalSupply_,
        uint8 decimals_
    ) {
        name = name_;
        symbol = symbol_;
        _totalSupply = totalSupply_;
        Decimals = decimals_;
        ContractOwner = msg.sender;
        balanceOf[msg.sender] += totalSupply_;
    }

    function decimals() public view returns (uint8) {
        return Decimals;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

 
    function transfer(address recipient, uint256 amount)
        external
        override
        returns (bool)
    {
        require(balanceOf[msg.sender] >= amount, "you have no enough balance");
        balanceOf[msg.sender] -= amount;
        balanceOf[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }


    function approve(address spender, uint256 amount)
        external
        override
        returns (bool)
    {
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }


    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external override returns (bool) {
        require(balanceOf[sender] >= amount, "you have no enough balance");
        allowance[sender][msg.sender] -= amount;
        balanceOf[sender] -= amount;
        balanceOf[recipient] += amount;
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function mintTo(address recipient, uint256 amount) external {
        require(
            ContractOwner == msg.sender,
            "You are not the owner of this contract"
        );
        balanceOf[recipient] += amount;
        _totalSupply += amount;
        emit Transfer(address(0), msg.sender, amount);
    }

    function burn(uint256 amount) external {
        balanceOf[msg.sender] -= amount;
        _totalSupply -= amount;
        emit Transfer(msg.sender, address(0), amount);
    }

    function ChangeContractOwner(address newOwner) public returns (bool) {
        require(
            ContractOwner == msg.sender,
            "You are not the owner of this contract"
        );
        ContractOwner = newOwner;
        return true;
    }
}
